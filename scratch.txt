Here is how I got the data into my local database for querying with Prisma ORM.

  Open the assessment data.json and just place the whole dang thing in one array. i.e.: ```[
                                                                                              {
    First install jq globally to your machine. `$ npm i jq -g`                                  "key" : val,
                                                                                                "key" : val,
        Ensure you're in the directory your data.json file lives.                           //...
        
        Then run the following jq command to create a CSV copy of your json data. Yes, this will include any and all null values (jq default feature)

    jq -r '.[] | [
      .component_cnt_bet,
      .selection,
      .line,
      .is_alternate,
      .is_inplay,
      .is_active,
      .is_cashout,
      .currency,
      .book_risk_component,
      .book_profit_gross_component,
      .client_id,
      .country,
      .state,
      .accepted_datetime_utc,
      .component_price,
      .component_prob,
      .component_num_bet,
      .bet_type_id,
      .bet_type,
      .book_risk,
      .parlay_type_id,
      .book_profit_gross,
      .parlay_type,
      .bet_price,
      .bet_prob,
      .country_id,
      .state_id,
      .currency_id,
      .sport_id,
      .sport,
      .season,
      .date,
      .datetime_utc,
      .event_id,
      .event_status_id,
      .event_type_id,
      .stat_type_id,
      .stat_type,
      .product_id,
      .product,
      .team_id,
      .opp_id,
      .team_abbr,
      .opp_abbr,
      .home,
      .player_id,
      .player_name,
      .pos_id,
      .pos_abbr,
      .game_played,
      .game_started,
      .actual,
      .accepted_min_before_start,
      .settled_date,
      .market_duration_id,
      .market_duration_value,
      .market_duration_type,
      .bet_id_swish,
      .component_id_swish,
      .line_at_bet,
      .prob_norm_at_bet,
      .proj_at_bet,
      .market_suspended_id,
      .market_suspended_description,
      .gamestate_id,
      .gamestate,
      .score,
      .opp_score,
      .period,
      .usage_at_bet,
      .actual_at_bet,
      .is_in_game,
      .event_time_id,
      .event_time_remaining,
      .usage_id,
      .orig_proj_at_bet,
      .line_diff_at_bet,
      .prob_diff_at_bet,
      .received_date,
      .client_name
    ] | @csv' example.json > output.csv

    then, still on your CL run psql to enter a postgresql terminal session

    CREATE DATABASE...CREATE TABLE(schematize)...

    command for creating table (Yes, TIMESTAMP will preserve the value of 'accepted_datetime_utc''s UTC format down to the millisecond -> refer to postgresql documentation if uncertain):

    CREATE TABLE <name_of_table> (
        component_cnt_bet INTEGER,
        selection TEXT,
        line NUMERIC,
        is_alternate INTEGER,
        is_inplay INTEGER,
        is_active TEXT,
        is_cashout TEXT,
        currency TEXT,
        book_risk_component NUMERIC,
        book_profit_gross_component NUMERIC,
        client_id INTEGER,
        country TEXT,
        state TEXT,
        accepted_datetime_utc TIMESTAMP,
        component_price NUMERIC,
        component_prob NUMERIC,
        component_num_bet INTEGER,
        bet_type_id INTEGER,
        bet_type TEXT,
        book_risk NUMERIC,
        parlay_type_id INTEGER,
        book_profit_gross NUMERIC,
        parlay_type TEXT,
        bet_price NUMERIC,
        bet_prob NUMERIC,
        country_id INTEGER,
        state_id TEXT,
        currency_id INTEGER,
        sport_id INTEGER,
        sport TEXT,
        season INTEGER,
        date DATE,
        datetime_utc TIMESTAMP,
        event_id INTEGER,
        event_status_id INTEGER,
        event_type_id INTEGER,
        stat_type_id INTEGER,
        stat_type TEXT,
        product_id INTEGER,
        product TEXT,
        team_id INTEGER,
        opp_id INTEGER,
        team_abbr TEXT,
        opp_abbr TEXT,
        home INTEGER,
        player_id INTEGER,
        player_name TEXT,
        pos_id INTEGER,
        pos_abbr TEXT,
        game_played INTEGER,
        game_started INTEGER,
        actual NUMERIC,
        accepted_min_before_start NUMERIC,
        settled_date DATE,
        market_duration_id INTEGER,
        market_duration_value TEXT,
        market_duration_type TEXT,
        bet_id_swish TEXT,
        component_id_swish TEXT,
        line_at_bet NUMERIC,
        prob_norm_at_bet NUMERIC,
        proj_at_bet NUMERIC,
        market_suspended_id TEXT,
        market_suspended_description TEXT,
        gamestate_id NUMERIC,
        gamestate TEXT,
        score NUMERIC,
        opp_score NUMERIC,
        period NUMERIC,
        usage_at_bet NUMERIC,
        actual_at_bet NUMERIC,
        is_in_game NUMERIC,
        event_time_id INTEGER,
        event_time_remaining INTEGER,
        usage_id INTEGER,
        orig_proj_at_bet NUMERIC,
        line_diff_at_bet NUMERIC,
        prob_diff_at_bet NUMERIC,
        received_date DATE,
        client_name TEXT
    );

    Still in your postgresql session, let's insert all the records that are in our CSV file into our database table.

    COPY <name_of_table> (
      component_cnt_bet,
      selection,
      line,
      is_alternate,
      is_inplay,
      is_active,
      is_cashout,
      currency,
      book_risk_component,
      book_profit_gross_component,
      client_id,
      country,
      state,
      accepted_datetime_utc,
      component_price,
      component_prob,
      component_num_bet,
      bet_type_id,
      bet_type,
      book_risk,
      parlay_type_id,
      book_profit_gross,
      parlay_type,
      bet_price,
      bet_prob,
      country_id,
      state_id,
      currency_id,
      sport_id,
      sport,
      season,
      date,
      datetime_utc,
      event_id,
      event_status_id,
      event_type_id,
      stat_type_id,
      stat_type,
      product_id,
      product,
      team_id,
      opp_id,
      team_abbr,
      opp_abbr,
      home,
      player_id,
      player_name,
      pos_id,
      pos_abbr,
      game_played,
      game_started,
      actual,
      accepted_min_before_start,
      settled_date,
      market_duration_id,
      market_duration_value,
      market_duration_type,
      bet_id_swish,
      component_id_swish,
      line_at_bet,
      prob_norm_at_bet,
      proj_at_bet,
      market_suspended_id,
      market_suspended_description,
      gamestate_id,
      gamestate,
      score,
      opp_score,
      period,
      usage_at_bet,
      actual_at_bet,
      is_in_game,
      event_time_id,
      event_time_remaining,
      usage_id,
      orig_proj_at_bet,
      line_diff_at_bet,
      prob_diff_at_bet,
      received_date,
      client_name
    )
    FROM '<path_to_csv_file>' DELIMITER ',' CSV HEADER;

    Now all your records are in your postgresql database.